package dao;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import managers.RentQueryProvider;
import model.Rent;
import model.RentHelper__MapperGenerated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class RentDaoImpl__MapperGenerated extends DaoBase implements RentDao {
  private static final Logger LOG = LoggerFactory.getLogger(RentDaoImpl__MapperGenerated.class);

  private final RentHelper__MapperGenerated rentHelper;

  private final PreparedStatement findByIdStatement;

  private final PreparedStatement deleteByIdStatement;

  private final RentQueryProvider saveInvoker;

  private final RentQueryProvider endInvoker;

  private RentDaoImpl__MapperGenerated(MapperContext context,
      RentHelper__MapperGenerated rentHelper, PreparedStatement findByIdStatement,
      PreparedStatement deleteByIdStatement, RentQueryProvider saveInvoker,
      RentQueryProvider endInvoker) {
    super(context);
    this.rentHelper = rentHelper;
    this.findByIdStatement = findByIdStatement;
    this.deleteByIdStatement = deleteByIdStatement;
    this.saveInvoker = saveInvoker;
    this.endInvoker = endInvoker;
  }

  @Override
  public Rent findById(int id) {
    BoundStatementBuilder boundStatementBuilder = findByIdStatement.boundStatementBuilder();
    boundStatementBuilder = populateBoundStatementWithStatementAttributes(boundStatementBuilder, "", "QUORUM", "", null, -2147483648, "", "");
    boundStatementBuilder = boundStatementBuilder.setInt("id", id);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, rentHelper);
  }

  @Override
  public void save(Rent rent) {
    saveInvoker.save(rent);
  }

  @Override
  public void end(Rent rent) {
    endInvoker.end(rent);
  }

  @Override
  public void deleteById(int id) {
    BoundStatementBuilder boundStatementBuilder = deleteByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.setInt("id", id);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<RentDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    try {
      // Initialize all entity helpers
      RentHelper__MapperGenerated rentHelper = new RentHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        rentHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `findById(int)`:
      SimpleStatement findByIdStatement_simple = rentHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method findById(int)",
          context.getSession().getName(),
          findByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByIdStatement = prepare(findByIdStatement_simple, context);
      prepareStages.add(findByIdStatement);
      // Prepare the statement for `deleteById(int)`:
      SimpleStatement deleteByIdStatement_simple = rentHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method deleteById(int)",
          context.getSession().getName(),
          deleteByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteByIdStatement = prepare(deleteByIdStatement_simple, context);
      prepareStages.add(deleteByIdStatement);
      // Initialize all method invokers
      RentQueryProvider saveInvoker = new RentQueryProvider(context);
      RentQueryProvider endInvoker = new RentQueryProvider(context);
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (RentDao) new RentDaoImpl__MapperGenerated(context,
              rentHelper,
              CompletableFutures.getCompleted(findByIdStatement),
              CompletableFutures.getCompleted(deleteByIdStatement),
              saveInvoker,
              endInvoker))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static RentDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
